import groovy.json.JsonBuilder
import groovy.json.JsonOutput

def modName = project.name
def modId = modName.toLowerCase()

// ---------------------------------------------------------------------------------------------------------------------
// Update
// ---------------------------------------------------------------------------------------------------------------------
apply plugin: "scala"
ScalaCompileOptions.metaClass {
    fork = true
    useAnt = false
    daemonServer = true
    useCompileDaemon = false
}

ext.coreModClass = "farseek.core.FarseekCoreMod"
def jvmArgs = "-Dfml.coreMods.load=$coreModClass"
apply plugin: "net.minecraftforge.gradle.forge"
minecraft {
    version = forgeRevision
    mappings = mcpMappings
    runDir = "run"
    clientJvmArgs += jvmArgs
    serverJvmArgs += jvmArgs
}

task addLibraryTransformers {
    fileTree(dir: "libs", include: "*.jar").each { File jar ->
        zipTree(jar).each { File file ->
            if(file.name.endsWith("_at.cfg")) {
                deobfMcMCP.addAt(file)
                deobfMcSRG.addAt(file)
            }
        }
    }
}

def modAuthorList = [githubUser]
def modDependencyList = modDependencies.split(";")
ext.writeJsonFile = { File dir, String name, Object contents ->
    dir.mkdirs()
    new File(dir, name).text = JsonOutput.prettyPrint(new JsonBuilder(contents).toString())
}
task modInfo { writeJsonFile(sourceSets.main.resources.srcDirs[0], "mcmod.info", [{
   modid        modId
   version      modVersion
   name         modName
   description  modDescription
   url          modUrl
   authorList   modAuthorList
   requiredMods modDependencyList
   dependencies modDependencyList
}])}

tasks.setupDecompWorkspace.dependsOn(addLibraryTransformers, modInfo)

apply plugin: "idea"
idea.module.excludeDirs += files(".idea", "gradle", "libs", "run")

// ---------------------------------------------------------------------------------------------------------------------
// Build
// ---------------------------------------------------------------------------------------------------------------------
String mcVersion = minecraft.version
version = "$mcVersion-$modVersion"

jar.manifest.attributes "FMLAT": "${modId}_at.cfg"

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
    from "common.gradle"
}

tasks.jar.dependsOn(deobfJar)

// ---------------------------------------------------------------------------------------------------------------------
// Release
// ---------------------------------------------------------------------------------------------------------------------
def changeLog = file("changelog.md").text
def releaseChangeLog = changeLog + """
Built using [Forge](http://files.minecraftforge.net/maven/net/minecraftforge/forge/index_${minecraft.version}.html) ${minecraft.forgeVersion} and [MCP mappings](http://export.mcpbot.bspk.rs) ${minecraft.mappings}.
"""

if(project.hasProperty("githubApiKey")) {
    apply plugin: "co.riiid.gradle"
    github {
        owner = githubUser
        token = githubApiKey
        repo = modName
        targetCommitish = mcVersion
        tagName = "v$version"
        body = releaseChangeLog
    }
}

if(project.hasProperty("curseForgeApiKey")) {
    apply plugin: "com.matthewprenger.cursegradle"
    curseforge {
        apiKey = curseForgeApiKey
        project {
            id = curseForgeId
            releaseType = curseForgeReleaseType
            changelog = releaseChangeLog
            changelogType = "markdown"
            curseGradleOptions.javaVersionAutoDetect = false
            addGameVersion "1.8"
            if(modId != "farseek") relations { requiredLibrary "farseek" }
        }
    }
}
