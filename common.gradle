// ---------------------------------------------------------------------------------------------------------------------
// Decompile
// ---------------------------------------------------------------------------------------------------------------------
apply plugin: "scala"

apply plugin: "net.minecraftforge.gradle.forge"
minecraft {
    version = "1904"
    mappings = "snapshot_20160514"
}

task addLibraryTransformers {
    fileTree(dir: "libs", include: "*.jar").each { File jar ->
        zipTree(jar).each { File file ->
            if(file.name.endsWith("_at.cfg")) {
                deobfMcMCP.addAt(file)
                deobfMcSRG.addAt(file)
            }
        }
    }
}
tasks.setupDecompWorkspace.dependsOn(addLibraryTransformers)

apply plugin: "idea"
idea.module.excludeDirs += files(".idea", "gradle", "libs", "run")

// ---------------------------------------------------------------------------------------------------------------------
// Run
// ---------------------------------------------------------------------------------------------------------------------
minecraft {
    runDir = "run"
    clientJvmArgs += "-Dfml.coreMods.load=farseek.core.FarseekCoreMod,$coreModClass"
    serverJvmArgs += "-Dfml.coreMods.load=farseek.core.FarseekCoreMod,$coreModClass"
}

// ---------------------------------------------------------------------------------------------------------------------
// Build
// ---------------------------------------------------------------------------------------------------------------------
version = modVersion

minecraft {
    replaceIn "${modClass.replace('.', '/')}.scala"
    replace "@Mod(", "@Mod(version=\"$modVersion\", dependencies=\"required-after:$modDependencies\", "
}

jar.manifest {
    attributes "FMLAT": accessTransformer
    attributes "FMLCorePlugin": coreModClass
    attributes "FMLCorePluginContainsFMLMod": "affirmative"
}

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
    from "common.gradle"
}
tasks.jar.dependsOn("deobfJar")

// ---------------------------------------------------------------------------------------------------------------------
// Release
// ---------------------------------------------------------------------------------------------------------------------
if(project.hasProperty("curseForgeApiKey")) {
    apply plugin: "com.matthewprenger.cursegradle"
    curseforge {
        apiKey = project.curseForgeApiKey
        project {
            id = curseForgeId
            releaseType = curseForgeReleaseType
            changelog = file("changelog.md")
            changelogType = "markdown"
            if(project.name != "Farseek") relations { requiredLibrary "farseek" }
        }
    }
}
