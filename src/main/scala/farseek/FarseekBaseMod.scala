package farseek

import farseek.config.ConfigCategory
import farseek.util.Logging
import net.minecraftforge.fml.common.Mod
import net.minecraftforge.fml.common.Mod.EventHandler
import net.minecraftforge.fml.common.event._
import scala.collection.JavaConversions._

/** Convenience base class for Farseek mods. Provides configuration and metadata support.
  * @author delvr
  */
abstract class FarseekBaseMod extends Logging {

    val id = getClass.getAnnotation(classOf[Mod]).modid

    def name: String
    def description: String
    def authors: Seq[String]

    def configuration: Option[ConfigCategory]

    /** If true, worlds created without this mod cannot be loaded while the mod is active. An onscreen message will inform the user of this. */
    def requiresNewWorld = false

    /** If defined, worlds created without this mod can be loaded but only after the user confirms the onscreen warning. */
    def existingWorldWarning: Option[String] = None

    /** Sets mod metadata from member defs. Programmable alternative to using a Forge mcmod.info file. */
    @EventHandler def handle(event: FMLPreInitializationEvent) {
        val meta = event.getModMetadata
        meta.autogenerated = false
        meta.name = name
        meta.description = description
        meta.authorList = authors
    }

    /** Loads and saves configuration file if defined, creating it if non-existent.
      * Runs late so other mods get to register blocks, etc. that could be referenced in configuration values. */
    @EventHandler def handle(event: FMLLoadCompleteEvent) {
        configuration.foreach { config =>
            config.load()
            config.save()
        }
    }
}
